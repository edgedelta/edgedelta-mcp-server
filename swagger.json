{
    "swagger": "2.0",
    "info": {
        "description": "Edge Delta API provides endpoints to manage your configs/integrations/rehydrations and more. Generate an API token to get started: https://app.edgedelta.com/admin/organization#api-tokens",
        "title": "Edge Delta API",
        "contact": {
            "name": "API Support",
            "email": "support@edgedelta.com"
        },
        "version": "1.0"
    },
    "paths": {
        "/v1/orgs/{org_id}/clustering/stats": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns top log patterns (signatures of log messages) and their stats; count, proportion, sentiment and delta.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pattern Stats",
                    "AI"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Edge Delta Common Query Language expression",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "If summary true call returns up to 50 interesting clusters with 10 top anomaly, top/bottom delta, top/bottom count. Param size is ignored",
                        "name": "summary",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Max number of clusters in response. For AI search, limit should be 20.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Lookback period in golang duration format. e.g. '1h'. Either provide from/to or provide lookback/to or just lookback",
                        "name": "lookback",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "From datetime in ISO format 2006-01-02T15:04:05.000Z",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "To datetime in ISO format 2006-01-02T15:04:05.000Z",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma separated fields to group by",
                        "name": "groupby",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Valatility can be new, existing, gone, all. Default is all",
                        "name": "volatility",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma separated offsets for delta stat calculation. Each offset is in golang duration format and order of offsets determines order of offset_ fields in cluster stat response. Default value is lookback duration. e.g. '24h'.",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Window for on demand anomaly calculation histogram series. e.g. '5m', '1h', '2d'. Combined values like '5m3s' are NOT supported.",
                        "name": "window",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Negative param is used to get negative sentiments.",
                        "name": "negative",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.ClusterStatResponse"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/confs": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Return org's agent configurations that user has read access to",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Agent Configs"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Should be set to 'true' if the contents won't be fetched",
                        "name": "empty_contents",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.Conf"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new config from the yml content passed in body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Agent Configs"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Config Create Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.ConfCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/core.Conf"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/confs/validate": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Validate agent configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Agent Configs"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Config Validate Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.ConfValidateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.ConfigValidationResult"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/confs/{conf_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns the requested config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Agent Configs"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Config ID",
                        "name": "conf_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Should be set to 'true' if the content won't be fetched",
                        "name": "empty_content",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Should be set to 'true' if the content would be fully resolved (i.e with children etc)",
                        "name": "resolve_content",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.Conf"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the config for given id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Agent Configs"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Config ID",
                        "name": "conf_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update config request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.UpdateConfRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes the config with given id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Agent Configs"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Config ID",
                        "name": "conf_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/events/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Search query using Edge Delta events search syntax, for anomaly search query should include event.type:pattern_anomaly",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event Search",
                    "AI"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Lookback period in golang duration format. e.g. '1h'. Either provide from/to or provide lookback/to or just lookback",
                        "name": "lookback",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "From datetime in ISO format 2006-01-02T15:04:05.000Z",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "To datetime in ISO format 2006-01-02T15:04:05.000Z",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Edge Delta Common Query Language expression",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limits the number of logs in the response. Default is 1000. It can be negative to move the cursor prev direction. Wraps to end if the cursor position is 0. For AI search, limit should be 20.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor provided from previous response, pass it to next request so that we can move the cursor with given limit.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order of the logs in the response, either 'ASC', 'asc', 'DESC' or 'desc'",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.EventResponse"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/integrations": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns template for streaming/trigger integrations.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Integrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Integrations template ID",
                        "name": "template_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.WizardTemplateResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Saves the new integration endpoints in org-settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Integrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Integrations Template ID",
                        "name": "template_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Dictionary of changed integrations {id:value}",
                        "name": "values",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete given integration endpoints in org-settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Integrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comma separated names of integration endpoints to delete",
                        "name": "names",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/integrations_v2": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns template for streaming/trigger integrations.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Integrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Integrations template ID",
                        "name": "template_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.WizardTemplateResponse"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/integrations_v2/test": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Tests the connectivity of the given integration endpoints.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Integrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "YAML config of the integration to test",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.IntegrationTestResponse"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/integrations_v2/test/supported": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Lists of integrations that support testing connectivity.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Integrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/admin.SupportedIntegrationsForTestingResponse"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/logs/log_search/search": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns time series log data for given query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Log Search",
                    "AI"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Lookback period in golang duration format. e.g. '1h'. Either provide from/to or provide lookback/to or just lookback",
                        "name": "lookback",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "From datetime in ISO format 2006-01-02T15:04:05.000Z",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "To datetime in ISO format 2006-01-02T15:04:05.000Z",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Edge Delta Common Query Language expression",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limits the number of logs in the response. Default is 1000. It can be negative to move the cursor prev direction. Wraps to end if the cursor position is 0. For AI search, limit should be 20.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Scope can be audit or log",
                        "name": "scope",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cursor provided from previous response, pass it to next request so that we can move the cursor with given limit.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma separated list of custom columns to include in the recent search queries",
                        "name": "custom_columns",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order of the logs in the response, either 'ASC', 'asc', 'DESC' or 'desc'",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Session ID to track the search session",
                        "name": "sessionId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Page ID to track the pagination state",
                        "name": "pageId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The boolean to decide whether to save the query in history",
                        "name": "save",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.ArchiveResponseV1"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/lookup_tables": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a Lookup Table metadata and stores its data for the given org and id.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lookup Tables"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Table data",
                        "name": "data",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Description of the table",
                        "name": "description",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Tags for the table",
                        "name": "tags",
                        "in": "formData"
                    },
                    {
                        "type": "boolean",
                        "description": "Whether or not this lookup table is being created for ED packs",
                        "name": "is_ed_lookup_table",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Time the lookup table was created. Only used by packs",
                        "name": "created",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.LookupTable"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/lookup_tables/metadata": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns metadata of all of the Lookup Tables for the given org.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lookup Tables"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.LookupTablesMetadataResponse"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/lookup_tables/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns data for the specific Lookup Table.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lookup Tables"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Lookup Table ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.LookupTableResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates data and/or metadata of a Lookup Table for the given org and id.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Lookup Tables"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Lookup Table ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Table data",
                        "name": "data",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes the Lookup Table for the given org and id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lookup Tables"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Lookup Table ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/lookup_tables/{id}/metadata": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns metadata of the Lookup Tables for the given org and id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lookup Tables"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Lookup Table ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.LookupTableMetadataResponse"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/pipelines/base": {
            "post": {
                "description": "Creates a Pipeline with base configuration according to environment and fleet subtype",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Create Pipeline",
                    "AI"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pipeline request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.BaseConfCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.ConfCreateResponse"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/pipelines/yaml": {
            "post": {
                "description": "Return the config YAML representation of the pipeline configuration given in json",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get Pipeline YAML",
                    "AI"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The current state of a Pipeline",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pipeline.ConvertYamlRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pipeline.ConvertYamlResponse"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/pipelines/{conf_id}/deploy/{version}": {
            "post": {
                "description": "Deploys the pipeline configuration. Version is the timestamp of the Pipeline history.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Deploy Pipeline",
                    "AI"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Config ID",
                        "name": "conf_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "version",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pipeline.GetVisualPipelineResponse"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/pipelines/{conf_id}/extend": {
            "post": {
                "description": "Updates an existent pipeline with input nodes with given source information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Add Source",
                    "AI"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Conf ID",
                        "name": "conf_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pipeline Nodes",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pipeline.ExtendPipelineWithSourcesRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/pipelines/{conf_id}/history": {
            "get": {
                "description": "Returns the history of a Pipeline configuration. Timestamp of the Pipeline history is used as version when deploying the Pipeline.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Pipeline History",
                    "AI"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Config ID",
                        "name": "conf_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.ConfigHistory"
                            }
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/pipelines/{conf_id}/sources": {
            "get": {
                "description": "Returns detected sources for a given pipeline configuration",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sources",
                    "AI"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Conf ID",
                        "name": "conf_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.SourceDetectionPayload"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/pipelines/{conf_id}/visualize": {
            "get": {
                "description": "Returns a readonly view of the Pipeline Visualizer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Get Pipeline",
                    "AI"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Conf ID",
                        "name": "conf_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pipeline.GetVisualPipelineResponse"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/rehydration": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns list of rehydrations based on given filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rehydrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "If rehydration_id is given only matching item is returned in the response",
                        "name": "rehydration_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Lookback period in golang duration format. e.g. '1h'. Either provide from/to or provide lookback/to or just lookback",
                        "name": "lookback",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "From datetime in ISO format 2006-01-02T15:04:05.000Z",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "To datetime in ISO format 2006-01-02T15:04:05.000Z",
                        "name": "to",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Host filter. Not filtered by host if not provided",
                        "name": "host",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tag filter. Not filtered by tag if not provided",
                        "name": "tag",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Source type filter. e.g. 'File', 'Docker'. Not filtered by source type if not provided",
                        "name": "sourcetype",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Cluster ID filter. Not filtered by cluster id if not provided",
                        "name": "cluster_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.Rehydration"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new rehydration item in dynamo and invokes async rehydration handler",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rehydrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rehydration to be created",
                        "name": "rehydration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.Rehydration"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Defaults to downloading files from s3 but if defined current valid values are: clickhouse",
                        "name": "warehouse_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "If true use chconn, the low level library for clickhouse, for queries",
                        "name": "clickhouse_low_level",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/core.Rehydration"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/rehydration/overlap": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns existing rehydrations overlapping with given rehydration object",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rehydrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rehydration for searching overlaps",
                        "name": "rehydration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.Rehydration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/core.Rehydration"
                            }
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/rehydration/{rehydration_id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns rehydration with status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rehydrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Rehydration ID",
                        "name": "rehydration_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.RehydrationWithStatus"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "A rehydration object can only be updated to CANCELLED state, otherwise it's immutable",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rehydrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Rehydration ID",
                        "name": "rehydration_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Rehydration objects are immutable except the status can be changed to CANCELLED",
                        "name": "rehydration",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/core.Rehydration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.Rehydration"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "First cancels the rehydration if it's running and marks for deletion",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rehydrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Rehydration ID",
                        "name": "rehydration_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.Rehydration"
                        }
                    }
                }
            }
        },
        "/v1/orgs/{org_id}/rehydration_v2": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns list of rehydrations based on given filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Rehydrations"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Org ID",
                        "name": "org_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Lookback period in golang duration format. e.g. '1h'. Either provide from/to or provide lookback/to or just lookback",
                        "name": "lookback",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "From datetime in ISO format 2006-01-02T15:04:05.000Z",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "To datetime in ISO format 2006-01-02T15:04:05.000Z",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/core.RehydrationResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "admin.SupportedIntegrationsForTestingResponse": {
            "type": "object",
            "properties": {
                "integrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/nodetype.NodeType"
                    }
                }
            }
        },
        "configv3.AggregateMetricAggregationOptions": {
            "type": "object",
            "properties": {
                "distinct_count_keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "distinct_count_mode": {
                    "type": "string"
                }
            }
        },
        "configv3.AggregateMetricRule": {
            "type": "object",
            "properties": {
                "aggregation_options": {
                    "$ref": "#/definitions/configv3.AggregateMetricAggregationOptions"
                },
                "aggregation_type": {
                    "type": "string"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "group_by": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "interval": {
                    "type": "string"
                },
                "keep_only_group_by_keys": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "configv3.AuthenticationConf": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "strategy": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "configv3.Authorization": {
            "type": "object",
            "properties": {
                "client_credentials": {
                    "$ref": "#/definitions/configv3.AuthorizationClientCredentials"
                },
                "strategy": {
                    "type": "string"
                }
            }
        },
        "configv3.AuthorizationClientCredentials": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string"
                },
                "client_secret": {
                    "type": "string"
                },
                "extra_parameters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "header_templates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.Header"
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "token_url": {
                    "type": "string"
                }
            }
        },
        "configv3.CaptureGroupMask": {
            "type": "object",
            "properties": {
                "capture_group": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "mask": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "configv3.CircuitBreakerConfig": {
            "type": "object",
            "properties": {
                "check_interval": {
                    "type": "string"
                },
                "enabled": {
                    "description": "Enable/disable circuit breaker",
                    "type": "boolean"
                },
                "failure_threshold": {
                    "description": "Circuit breaker thresholds",
                    "type": "integer"
                },
                "global_health": {
                    "description": "Global health monitoring",
                    "allOf": [
                        {
                            "$ref": "#/definitions/configv3.GlobalHealthConfig"
                        }
                    ]
                },
                "half_open_max_calls": {
                    "description": "Half-open testing configuration",
                    "type": "integer"
                },
                "half_open_timeout": {
                    "type": "string"
                },
                "open_timeout": {
                    "description": "Timeout durations",
                    "type": "string"
                }
            }
        },
        "configv3.CustomLabels": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "configv3.CustomTag": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "configv3.DimGroup": {
            "type": "object",
            "properties": {
                "anomaly_coefficient": {
                    "type": "number"
                },
                "anomaly_confidence_period": {
                    "type": "string"
                },
                "anomaly_tolerance": {
                    "type": "number"
                },
                "custom_suffix": {
                    "type": "string"
                },
                "dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dimensions_as_attributes": {
                    "description": "DEPRECATED: It is always assumed as true, changing the value will result in no-op. Left for backwards compatibility reasons",
                    "type": "boolean"
                },
                "enabled_stats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "field_dimensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "field_numeric_dimension": {
                    "type": "string"
                },
                "interval": {
                    "type": "string"
                },
                "numeric_dimension": {
                    "type": "string"
                },
                "only_report_nonzeros": {
                    "type": "boolean"
                },
                "retention": {
                    "type": "string"
                },
                "skip_empty_intervals": {
                    "type": "boolean"
                },
                "value_adjustment_rule": {
                    "type": "string"
                }
            }
        },
        "configv3.DroppedColumn": {
            "type": "object",
            "properties": {
                "exceptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "metric_categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "configv3.EDLogs": {
            "type": "object",
            "properties": {
                "level": {
                    "type": "string"
                },
                "secure_logging": {
                    "description": "If enabled, some of the sensitive information will be redacted (can affect performance of agent)",
                    "type": "boolean"
                }
            }
        },
        "configv3.EDSetting": {
            "type": "object",
            "properties": {
                "anomaly_coefficient": {
                    "type": "number"
                },
                "anomaly_confidence_period": {
                    "type": "string"
                },
                "anomaly_tolerance": {
                    "type": "number"
                },
                "archive_flush_interval": {
                    "type": "string"
                },
                "archive_max_byte_limit": {
                    "$ref": "#/definitions/datasize.Size"
                },
                "item_buffer_flush_interval": {
                    "type": "string"
                },
                "item_buffer_max_byte_limit": {
                    "$ref": "#/definitions/datasize.Size"
                },
                "item_schema": {
                    "$ref": "#/definitions/core.ItemSchema"
                },
                "log": {
                    "$ref": "#/definitions/configv3.EDLogs"
                },
                "max_incomplete_line_buffer_size": {
                    "$ref": "#/definitions/datasize.Size"
                },
                "metric_column_opts": {
                    "$ref": "#/definitions/configv3.MetricColumnOptions"
                },
                "multiline_max_byte_size": {
                    "$ref": "#/definitions/datasize.Size"
                },
                "multiline_max_size": {
                    "type": "integer"
                },
                "only_report_nonzeros": {
                    "type": "boolean"
                },
                "persisting_cursor_settings": {
                    "$ref": "#/definitions/configv3.PersistingCursorSettings"
                },
                "read_settings": {
                    "$ref": "#/definitions/configv3.ReadSettings"
                },
                "skip_empty_intervals": {
                    "type": "boolean"
                },
                "source_discovery_interval": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "configv3.EndpointResolution": {
            "type": "string",
            "enum": [
                "dns",
                "k8s",
                "static"
            ],
            "x-enum-varnames": [
                "DNSEndpointResolution",
                "K8sEndpointResolution",
                "StaticEndpointResolution"
            ]
        },
        "configv3.ExtractMetricGauge": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "configv3.ExtractMetricRule": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "gauge": {
                    "$ref": "#/definitions/configv3.ExtractMetricGauge"
                },
                "name": {
                    "type": "string"
                },
                "sum": {
                    "$ref": "#/definitions/configv3.ExtractMetricSum"
                },
                "unit": {
                    "type": "string"
                }
            }
        },
        "configv3.ExtractMetricSum": {
            "type": "object",
            "properties": {
                "aggregation_temporality": {
                    "type": "string"
                },
                "is_monotonic": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "configv3.FieldMappings": {
            "type": "object",
            "properties": {
                "field_name": {
                    "type": "string"
                },
                "override_if_exists": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                },
                "value_hint": {
                    "type": "string"
                }
            }
        },
        "configv3.GlobalHealthConfig": {
            "type": "object",
            "properties": {
                "check_interval": {
                    "description": "Health check interval",
                    "type": "string"
                },
                "enabled": {
                    "description": "Enable/disable global health monitoring",
                    "type": "boolean"
                },
                "memory_check_enabled": {
                    "description": "Enable resource specific checks",
                    "type": "boolean"
                },
                "memory_threshold": {
                    "description": "Memory threshold",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datasize.Size"
                        }
                    ]
                },
                "queue_check_enabled": {
                    "type": "boolean"
                },
                "queue_threshold_percentage": {
                    "description": "Queue utilization threshold percentage",
                    "type": "integer"
                }
            }
        },
        "configv3.Header": {
            "type": "object",
            "properties": {
                "header": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "configv3.InputDiscovery": {
            "type": "object",
            "properties": {
                "file_path": {
                    "description": "FilePath is used for globbing files for. For K8s, we will use this glob path\ninstead of well-known ones to handle non-stdout cases",
                    "type": "string"
                },
                "parsing_pattern": {
                    "description": "ParsingPattern is used for extracting information out of literal file paths.\nFor K8s, it will be used for extracting pod UID (required) and container name (optional).",
                    "type": "string"
                }
            }
        },
        "configv3.InputRateLimit": {
            "type": "object",
            "properties": {
                "evaluation_policy": {
                    "description": "Policy defines how rate limiting will be evaluated",
                    "allOf": [
                        {
                            "$ref": "#/definitions/configv3.InputRateLimitPolicy"
                        }
                    ]
                }
            }
        },
        "configv3.InputRateLimitPolicy": {
            "type": "object",
            "properties": {
                "absolute_limit": {
                    "description": "AbsoluteLimit defines the absolute limit for certain policies, see pkg/ratelimiter/type.go",
                    "type": "number"
                },
                "evaluation_mode": {
                    "description": "EvaluationMode defines how evaluation will be handled, such as if it is only going to be monitored or enforced",
                    "type": "string"
                },
                "policy_type": {
                    "description": "PolicyType defines what kind of rate limiting policy will be pursued",
                    "type": "string"
                },
                "refresh_interval": {
                    "description": "RefreshInterval defines when to refresh current value for certain policies, see pkg/ratelimiter/type.go",
                    "type": "string"
                },
                "relative_limit": {
                    "description": "RelativeLimit defines the relative limit for certain policies, see pkg/ratelimiter/type.go",
                    "type": "number"
                },
                "sub_policies": {
                    "description": "SubPolicies are used for composite (ie. depends on multiple policies) policy types such as \"and\" \u0026 \"or\"",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.InputRateLimitPolicy"
                    }
                }
            }
        },
        "configv3.InputSourceMetadata": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                },
                "resource_attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    }
                }
            }
        },
        "configv3.Link": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "configv3.LookupField": {
            "type": "object",
            "properties": {
                "append_mode": {
                    "type": "boolean"
                },
                "default_value": {
                    "type": "string"
                },
                "event_field": {
                    "type": "string"
                },
                "lookup_field": {
                    "type": "string"
                }
            }
        },
        "configv3.MetricColumnOptions": {
            "type": "object",
            "properties": {
                "drop_columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.DroppedColumn"
                    }
                }
            }
        },
        "configv3.Node": {
            "type": "object",
            "required": [
                "command",
                "events_per_sec",
                "run_interval"
            ],
            "properties": {
                "access_key": {
                    "type": "string"
                },
                "account_key": {
                    "type": "string"
                },
                "account_name": {
                    "description": "Azure Blob specific",
                    "type": "string"
                },
                "active_gate_domain": {
                    "type": "string"
                },
                "active_gate_port": {
                    "type": "integer"
                },
                "add_ingestion_time": {
                    "type": "boolean"
                },
                "address": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "aggregate_metric_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.AggregateMetricRule"
                    }
                },
                "alert_as_log": {
                    "description": "Alert as log is used to send alerts as log instead of events by default for some destinations",
                    "type": "boolean"
                },
                "anomaly_coefficient": {
                    "type": "number"
                },
                "anomaly_confidence_period": {
                    "type": "string"
                },
                "anomaly_tolerance": {
                    "type": "number"
                },
                "api_key": {
                    "type": "string"
                },
                "async": {
                    "type": "boolean"
                },
                "authentication": {
                    "description": "Since both inputs and outputs have these in common, this field is shared here",
                    "allOf": [
                        {
                            "$ref": "#/definitions/configv3.AuthenticationConf"
                        }
                    ]
                },
                "authorization": {
                    "description": "Authorization is used by HTTP pull and HTTP output node",
                    "allOf": [
                        {
                            "$ref": "#/definitions/configv3.Authorization"
                        }
                    ]
                },
                "auto_create_container": {
                    "type": "boolean"
                },
                "auto_detect_line_pattern": {
                    "description": "For the next 3 bool, should these functionalities stay at the input level?",
                    "type": "boolean"
                },
                "aws_key_id": {
                    "description": "AWS related fields",
                    "type": "string"
                },
                "aws_sec_key": {
                    "type": "string"
                },
                "batch_bytes": {
                    "type": "integer"
                },
                "batch_size": {
                    "description": "Kafka + Port output specific",
                    "type": "integer"
                },
                "batch_timeout": {
                    "type": "string"
                },
                "boost_stacktrace_detection": {
                    "type": "boolean"
                },
                "bucket": {
                    "description": "Archive specific (S3 + GCS)",
                    "type": "string"
                },
                "buffer_length": {
                    "type": "integer"
                },
                "buffer_max_bytesize": {
                    "$ref": "#/definitions/datasize.Size"
                },
                "buffer_path": {
                    "description": "Persistent retry buffer related fields",
                    "type": "string"
                },
                "buffer_size": {
                    "description": "DEPRECATED",
                    "allOf": [
                        {
                            "$ref": "#/definitions/datasize.Size"
                        }
                    ]
                },
                "buffer_ttl": {
                    "type": "string"
                },
                "cache": {
                    "$ref": "#/definitions/configv3.SamplingCaches"
                },
                "capture_group_masks": {
                    "description": "the mapping for capture groups such as \"pw: ******\" or \"pw: ''\" if removal without replacement desired. If 'Mask' is defined, this feature will be suppressed by it.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.CaptureGroupMask"
                    }
                },
                "channel": {
                    "type": "string"
                },
                "checkpoint_directory": {
                    "type": "string"
                },
                "client_id": {
                    "type": "string"
                },
                "client_secret": {
                    "type": "string"
                },
                "cloud_id": {
                    "description": "Elasticsearch specific\ncloudID or address url for endpoint",
                    "type": "string"
                },
                "command": {
                    "type": "string"
                },
                "commit_interval": {
                    "type": "string"
                },
                "compression": {
                    "type": "string"
                },
                "condition": {
                    "description": "Used by both OTTL filter and threshold",
                    "type": "string"
                },
                "config": {
                    "type": "string"
                },
                "connection_string": {
                    "type": "string"
                },
                "consecutive": {
                    "type": "integer"
                },
                "consumer_group": {
                    "type": "string"
                },
                "container": {
                    "type": "string"
                },
                "count_field_path": {
                    "type": "string"
                },
                "create_missing_group_and_stream": {
                    "type": "boolean"
                },
                "credentials_path": {
                    "description": "CredentialsPath is a path to a file containing credentials. In the case of GCL output, it is a service account credentials JSON file",
                    "type": "string"
                },
                "current_boot_only": {
                    "type": "boolean"
                },
                "custom_pattern": {
                    "type": "string"
                },
                "custom_tags": {
                    "description": "CustomTags are here for backwards compatibility reasons",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.CustomTag"
                    }
                },
                "data_collection_endpoint": {
                    "type": "string"
                },
                "data_collection_rule_id": {
                    "type": "string"
                },
                "data_type": {
                    "description": "DEPRECATED",
                    "type": "string"
                },
                "dd_datatype": {
                    "type": "string"
                },
                "dd_host": {
                    "type": "string"
                },
                "dd_hostname": {
                    "type": "string"
                },
                "dd_level": {
                    "type": "string"
                },
                "dd_message": {
                    "type": "string"
                },
                "dd_service": {
                    "type": "string"
                },
                "dd_source": {
                    "type": "string"
                },
                "dd_source_name": {
                    "type": "string"
                },
                "dd_tags": {
                    "type": "string"
                },
                "decision_interval": {
                    "description": "For tail sampling",
                    "type": "string"
                },
                "delimiter": {
                    "description": "Following fields apply to split with delimiter filter type\nDelimiter is the specified delimiting character used to split a single log to multiple logs",
                    "type": "string"
                },
                "demo_template": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "dimension_groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.DimGroup"
                    }
                },
                "dimensions_as_attributes": {
                    "description": "DEPRECATED: It is always assumed as true, changing the value will result in no-op. Left for backwards compatibility reasons",
                    "type": "boolean"
                },
                "disable_classic_metrics": {
                    "type": "boolean"
                },
                "disable_clustering_by_severity_level": {
                    "type": "boolean"
                },
                "disable_compaction": {
                    "type": "boolean"
                },
                "disable_compression": {
                    "type": "boolean"
                },
                "disable_intermediate_self_telemetry": {
                    "type": "boolean"
                },
                "disable_metadata_ingestion": {
                    "type": "boolean"
                },
                "disable_ssl": {
                    "type": "boolean"
                },
                "discovery": {
                    "description": "Discovery allows users to deviate from internal discovery logics via defining custom rules",
                    "allOf": [
                        {
                            "$ref": "#/definitions/configv3.InputDiscovery"
                        }
                    ]
                },
                "docker_mode": {
                    "description": "DockerMode expects file to be in Docker json log format and automatically extracts \"log\" fields.",
                    "type": "boolean"
                },
                "drain_tree_depth": {
                    "type": "integer"
                },
                "drain_tree_max_child": {
                    "type": "integer"
                },
                "enable_agent_stats_metrics": {
                    "type": "boolean"
                },
                "enable_granular_metrics": {
                    "type": "boolean"
                },
                "enable_health_metrics": {
                    "type": "boolean"
                },
                "enable_persisting_cursor": {
                    "type": "boolean"
                },
                "enabled_stats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "encoder": {
                    "$ref": "#/definitions/types.DataFormat"
                },
                "encoding": {
                    "type": "string"
                },
                "endpoint": {
                    "type": "string"
                },
                "endpoint_resolution_type": {
                    "description": "OTLP Destination related",
                    "allOf": [
                        {
                            "$ref": "#/definitions/configv3.EndpointResolution"
                        }
                    ]
                },
                "endpoint_type": {
                    "description": "Dynatrace related",
                    "type": "string"
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "environment_id": {
                    "type": "string"
                },
                "environment_type": {
                    "type": "string"
                },
                "event_endpoint": {
                    "type": "string"
                },
                "event_host": {
                    "type": "string"
                },
                "events_per_sec": {
                    "type": "string"
                },
                "exclude": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "exclude_capture_names": {
                    "type": "boolean"
                },
                "exclude_units": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "excluded_field_paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "expression_type": {
                    "description": "Currently only used by Route node, but it distinguishes CEL and OTTL for expression type",
                    "type": "string"
                },
                "external_id": {
                    "type": "string"
                },
                "extra_args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extract_metric_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.ExtractMetricRule"
                    }
                },
                "failure_pattern": {
                    "description": "Since both filters and ratio has common field, this field is shared here\nFailurePattern is the regex pattern which is used to determine whether the trace events should be considered failure",
                    "type": "string"
                },
                "fallback_value": {
                    "description": "Following fields apply to log level detector\nFallbackValue is the default value set if log level is not found in the log using given pattern",
                    "type": "string"
                },
                "features": {
                    "description": "DEPRECATED",
                    "type": "string"
                },
                "field_mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.FieldMappings"
                    }
                },
                "field_path": {
                    "description": "Following fields apply to extract-json-field filter type.\nFieldPath specifies the json path (dot separated) to the field whose value will be extracted and rest of the json content will be discarded.",
                    "type": "string"
                },
                "field_paths": {
                    "description": "For probabilistic sampling",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "file_name_filter": {
                    "type": "string"
                },
                "filter": {
                    "type": "string"
                },
                "filter_mode": {
                    "type": "string"
                },
                "flush_interval": {
                    "type": "string"
                },
                "group_by": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "group_id": {
                    "type": "string"
                },
                "group_name_expression": {
                    "type": "string"
                },
                "headers": {
                    "description": "Headers are used by both HTTP input and output node",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.Header"
                    }
                },
                "histogram_limit": {
                    "type": "integer"
                },
                "hmac_access_key": {
                    "description": "GCS specific",
                    "type": "string"
                },
                "hmac_secret": {
                    "type": "string"
                },
                "host": {
                    "description": "Host used for port pushers",
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "ignore_case": {
                    "type": "boolean"
                },
                "include": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "include_units": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "included_paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "index": {
                    "description": "Index field is co-used by Elastic and Splunk configuration",
                    "type": "string"
                },
                "interval": {
                    "type": "string"
                },
                "journal_directory": {
                    "type": "string"
                },
                "journal_namespace": {
                    "type": "string"
                },
                "journalctl_path": {
                    "type": "string"
                },
                "json_field_path": {
                    "description": "JSONFieldPath is the path within the JSON that holds the list that needs to be json unrolled",
                    "type": "string"
                },
                "k": {
                    "type": "integer"
                },
                "k8s_namespace": {
                    "type": "string"
                },
                "k8s_service_name": {
                    "type": "string"
                },
                "keep_log_if_failed": {
                    "description": "Following fields apply to log transformer JavaScript and enrichment using JavaScript\nStarting from agent v0.1.51, filters that were using \"required\" field will use \"keep_log_if_failed\" instead. Default value of this field is false\nReason for change is that script-based filters and alike should fail fast and discard log so the issue could be caught earlier",
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "key_field_paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "key_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.LookupField"
                    }
                },
                "key_path": {
                    "type": "string"
                },
                "labels": {
                    "description": "Following fields are for any output node that support custom labeling\nCurrently used by Prometheus metrics exporter, Loki and GCL output node",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.CustomLabels"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "line_pattern": {
                    "type": "string"
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.Link"
                    }
                },
                "listen": {
                    "type": "string"
                },
                "location_path": {
                    "type": "string"
                },
                "log_endpoint": {
                    "description": "datadog and new relic related endpoints",
                    "type": "string"
                },
                "log_host": {
                    "description": "for some integrations it makes sense to just ask for target host name and\nagent can form the full endpoint with given api key etc.",
                    "type": "string"
                },
                "log_name": {
                    "description": "Following fields are for GCL output node",
                    "type": "string"
                },
                "log_parsing_mode": {
                    "type": "string"
                },
                "log_type": {
                    "$ref": "#/definitions/flog.Format"
                },
                "lower_limit": {
                    "type": "integer"
                },
                "mask": {
                    "description": "Mask is the replacement string such as \"******\" or \"\" if removal without replacement desired.",
                    "type": "string"
                },
                "mask_captured": {
                    "description": "TODO: (VPB-440) Remove MaskCaptured field\n\n\t\tDeprecated @ 07-06-23 Use CaptureGroupMasks instead\n\n\t\tMaskCaptured is the mapping for capture groups such as \"pw: ******\" or \"pw: ''\" if removal without replacement desired. If 'Mask' is defined, this feature will be suppressed by it.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "match_mode": {
                    "type": "string"
                },
                "match_option": {
                    "type": "string"
                },
                "max_batch_size": {
                    "$ref": "#/definitions/datasize.Size"
                },
                "max_byte_limit": {
                    "$ref": "#/definitions/datasize.Size"
                },
                "max_message_size": {
                    "$ref": "#/definitions/datasize.Size"
                },
                "metadata": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "metric_endpoint": {
                    "type": "string"
                },
                "metric_host": {
                    "type": "string"
                },
                "metric_name": {
                    "type": "string"
                },
                "mounted_path": {
                    "description": "LocalStorage specific",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace_expression": {
                    "description": "Following fields are for AWS Cloudwatch output node",
                    "type": "string"
                },
                "negate": {
                    "description": "Negate reverts the result of filter. Can be applied to regex, attribute and combination filter",
                    "type": "boolean"
                },
                "new_field_name": {
                    "description": "NewFieldName is currrently used for JSON unroll only. It is the name that the exploded array element will receive in each new event.\nLeave empty to expand the array element with its original name.",
                    "type": "string"
                },
                "node_reference": {
                    "description": "NodeReference refers to an org-level destination. When this is set the destination details should be pulled from org-settings API.",
                    "type": "string"
                },
                "nodes": {
                    "description": "Compound node specific fields",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.Node"
                    }
                },
                "num_of_clusters": {
                    "type": "integer"
                },
                "number_to_allow": {
                    "type": "integer"
                },
                "observation_path": {
                    "type": "string"
                },
                "only_report_nonzeros": {
                    "type": "boolean"
                },
                "other_peer_name_exclude_pattern": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "out_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.LookupField"
                    }
                },
                "parallel_worker_count": {
                    "type": "integer"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.Parameter"
                    }
                },
                "partition_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pass_through_on_failure": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "path_prefix": {
                    "$ref": "#/definitions/configv3.PathPrefix"
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.RoutePath"
                    }
                },
                "pattern": {
                    "description": "Since both filters and regex rules have pattern, this field is shared here",
                    "type": "string"
                },
                "pattern_field_path": {
                    "description": "Contains the location of the pattern to use\nUsed by Regex Filter and Grok",
                    "type": "string"
                },
                "payload": {
                    "description": "Webhook and HTTP output fields",
                    "type": "string"
                },
                "percentage": {
                    "type": "integer"
                },
                "pod_network_cidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pool_size": {
                    "type": "integer"
                },
                "port": {
                    "type": "integer"
                },
                "predefined_pattern": {
                    "description": "Following fields apply to mask filter type\nPredefinedPattern names such as \"credit_card\"",
                    "type": "string"
                },
                "preserve_original_timestamp": {
                    "type": "boolean"
                },
                "priority_field": {
                    "type": "string"
                },
                "process_field": {
                    "description": "ProcessField is a dot separated path to the field which is used to determine which field the log processor should use to get the log message from to process.\nIf this field is not provided, the default is item[\"body\"].",
                    "type": "string"
                },
                "processors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.SequenceProcessor"
                    }
                },
                "project_id": {
                    "description": "Following fields are for Google PubSub output node",
                    "type": "string"
                },
                "protocol": {
                    "type": "string"
                },
                "pull_interval": {
                    "type": "string"
                },
                "queue_capacity": {
                    "type": "integer"
                },
                "rate_limit": {
                    "description": "RateLimit allows users to define rate limiting policies",
                    "allOf": [
                        {
                            "$ref": "#/definitions/configv3.InputRateLimit"
                        }
                    ]
                },
                "read_size": {
                    "type": "integer"
                },
                "read_timeout": {
                    "type": "string"
                },
                "regex_option": {
                    "type": "string"
                },
                "region": {
                    "description": "AWS specific (Cloudwatch + S3)",
                    "type": "string"
                },
                "reload_period": {
                    "type": "string"
                },
                "report_connection_throughput_metrics": {
                    "type": "boolean"
                },
                "report_interval": {
                    "type": "string"
                },
                "report_unresolved_ssl_connections": {
                    "type": "boolean"
                },
                "reporting_frequency": {
                    "type": "string"
                },
                "request_format": {
                    "description": "Crowdstrike LogScale related",
                    "type": "string"
                },
                "required_acks": {
                    "description": "Kafka output",
                    "type": "integer"
                },
                "resilience": {
                    "description": "Resilience configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/configv3.ResilienceConfig"
                        }
                    ]
                },
                "resource_fields": {
                    "description": "ResourceFields allows certain additional labels to be collected for associated source",
                    "allOf": [
                        {
                            "$ref": "#/definitions/configv3.ResourceFields"
                        }
                    ]
                },
                "resource_labels_expression": {
                    "description": "ResourceLabelsExpression is a field path that will point to where to be sent labels can be found as a map",
                    "type": "string"
                },
                "resource_type_expression": {
                    "description": "ResourceTypeExpression is a CEL expression to fetch resource type from items dynamically",
                    "type": "string"
                },
                "retention": {
                    "type": "string"
                },
                "retire_period": {
                    "description": "RetirePeriod is used in both log to pattern node and prometheus exporter output node",
                    "type": "string"
                },
                "retry_http_code": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "role_arn": {
                    "type": "string"
                },
                "routing_key_expressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "run_interval": {
                    "type": "string"
                },
                "s3_force_path_style": {
                    "type": "boolean"
                },
                "samples_per_cluster": {
                    "type": "integer"
                },
                "sampling": {
                    "description": "rate of sampling for the node 0.0-1.0, if not defined assumed as 1.0 and no sampling",
                    "type": "number"
                },
                "sampling_policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.SamplingPolicy"
                    }
                },
                "sasl": {
                    "$ref": "#/definitions/configv3.SASL"
                },
                "schema": {
                    "type": "string"
                },
                "scrape_interval": {
                    "type": "string"
                },
                "script": {
                    "description": "Since both filters and inputs have script, this field is shared here\nIs the script content in JavaScript for filters\nIs the exec script for exec input",
                    "type": "string"
                },
                "secret_key": {
                    "type": "string"
                },
                "send_as_json": {
                    "description": "Send as json is used to send data to Sumologic in JSON format instead",
                    "type": "boolean"
                },
                "separate_source": {
                    "type": "boolean"
                },
                "separator": {
                    "type": "string"
                },
                "shared_key": {
                    "description": "Other fields are shared with InputPort\nFormat can be any of these https://docs.fluentbit.io/manual/pipeline/outputs",
                    "type": "string"
                },
                "should_only_leader_ingest": {
                    "type": "boolean"
                },
                "similarity_threshold": {
                    "type": "number"
                },
                "skip_empty_intervals": {
                    "type": "boolean"
                },
                "skip_ingestion_time_on_failure": {
                    "type": "boolean"
                },
                "source_field_overrides": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.SourceFieldOverride"
                    }
                },
                "source_metadata": {
                    "$ref": "#/definitions/configv3.InputSourceMetadata"
                },
                "splunk_event": {
                    "type": "string"
                },
                "splunk_fields": {
                    "type": "string"
                },
                "splunk_host": {
                    "type": "string"
                },
                "splunk_index": {
                    "type": "string"
                },
                "splunk_source": {
                    "type": "string"
                },
                "splunk_source_type": {
                    "type": "string"
                },
                "splunk_time": {
                    "type": "string"
                },
                "sqs_url": {
                    "type": "string"
                },
                "statements": {
                    "type": "string"
                },
                "storage_account_key": {
                    "type": "string"
                },
                "storage_account_name": {
                    "type": "string"
                },
                "storage_container_name": {
                    "type": "string"
                },
                "stream_name": {
                    "description": "Azure related",
                    "type": "string"
                },
                "stream_name_expression": {
                    "type": "string"
                },
                "sub_id": {
                    "type": "string"
                },
                "success_pattern": {
                    "type": "string"
                },
                "suppression_window": {
                    "description": "Trigger output fields",
                    "type": "string"
                },
                "tag_prefix": {
                    "description": "TagPrefix is used by fluentd output",
                    "type": "string"
                },
                "target_allocation_type": {
                    "$ref": "#/definitions/configv3.TargetAllocation"
                },
                "target_source_type": {
                    "type": "string"
                },
                "template_type": {
                    "$ref": "#/definitions/core.TemplateType"
                },
                "templates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tenant_id": {
                    "type": "string"
                },
                "throttle_limit_per_sec": {
                    "type": "integer"
                },
                "timestamp_granularity": {
                    "type": "string"
                },
                "tls": {
                    "$ref": "#/definitions/configv3.TLS"
                },
                "token": {
                    "type": "string"
                },
                "topic": {
                    "description": "specific to Kafka input/output",
                    "type": "string"
                },
                "transformations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.TransformField"
                    }
                },
                "type": {
                    "$ref": "#/definitions/nodetype.NodeType"
                },
                "use_legacy_formatting": {
                    "description": "UseLegacyFormatting will be used for supporting agent v0 formats for outputs",
                    "type": "boolean"
                },
                "use_native_compression": {
                    "type": "boolean"
                },
                "user": {
                    "description": "apiKey or user/pass auth",
                    "type": "string"
                },
                "user_description": {
                    "description": "DEPRECATED: use `description`",
                    "type": "string"
                },
                "value_adjustment_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.ValueAdjustmentRule"
                    }
                }
            }
        },
        "configv3.Parameter": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "configv3.PathPrefix": {
            "type": "object",
            "properties": {
                "format": {
                    "type": "string"
                },
                "order": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "configv3.PersistingCursorSettings": {
            "type": "object",
            "properties": {
                "file_name": {
                    "type": "string"
                },
                "flush_interval": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "configv3.ReadSettings": {
            "type": "object",
            "properties": {
                "initial_read_size": {
                    "type": "number"
                },
                "max_read_size": {
                    "type": "number"
                },
                "min_read_size": {
                    "type": "number"
                },
                "total_read_capacity": {
                    "type": "number"
                }
            }
        },
        "configv3.ResilienceConfig": {
            "type": "object",
            "properties": {
                "circuit_breaker": {
                    "description": "Circuit breaker configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/configv3.CircuitBreakerConfig"
                        }
                    ]
                }
            }
        },
        "configv3.ResourceFields": {
            "type": "object",
            "properties": {
                "namespace_labels": {
                    "description": "NamespaceLabels is for K8s",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "node_labels": {
                    "description": "NodeLabels is for K8s",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pod_annotations": {
                    "description": "PodAnnotations is for K8s",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pod_labels": {
                    "description": "PodLabels is for K8s",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "configv3.RoutePath": {
            "type": "object",
            "properties": {
                "condition": {
                    "type": "string"
                },
                "exit_if_matched": {
                    "type": "boolean"
                },
                "path": {
                    "type": "string"
                }
            }
        },
        "configv3.SASL": {
            "type": "object",
            "properties": {
                "mechanism": {
                    "description": "Supported SASL mechanism: PLAIN, SCRAM-SHA-256, SCRAM-SHA-512",
                    "type": "string"
                },
                "password": {
                    "description": "SASL authentication password",
                    "type": "string"
                },
                "username": {
                    "description": "SASL authentication username",
                    "type": "string"
                }
            }
        },
        "configv3.SamplingCache": {
            "type": "object",
            "properties": {
                "size": {
                    "type": "integer"
                }
            }
        },
        "configv3.SamplingCaches": {
            "type": "object",
            "properties": {
                "batch": {
                    "$ref": "#/definitions/configv3.SamplingCache"
                },
                "drop": {
                    "$ref": "#/definitions/configv3.SamplingCache"
                },
                "keep": {
                    "$ref": "#/definitions/configv3.SamplingCache"
                }
            }
        },
        "configv3.SamplingPolicy": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "hash_salt": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "lower_threshold": {
                    "type": "string"
                },
                "max_span_count": {
                    "type": "integer"
                },
                "max_value": {
                    "type": "number"
                },
                "min_span_count": {
                    "type": "integer"
                },
                "min_value": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "percentage": {
                    "type": "number"
                },
                "policy_type": {
                    "type": "string"
                },
                "regex_cache_size": {
                    "type": "integer"
                },
                "status_codes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sub_policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.SamplingPolicy"
                    }
                },
                "support_regex": {
                    "type": "boolean"
                },
                "upper_threshold": {
                    "type": "string"
                },
                "value": {
                    "type": "boolean"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "configv3.SequenceProcessor": {
            "type": "object",
            "properties": {
                "aggregate_metric_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.AggregateMetricRule"
                    }
                },
                "cache": {
                    "$ref": "#/definitions/configv3.SamplingCaches"
                },
                "capture_group_masks": {
                    "description": "the mapping for capture groups such as \"pw: ******\" or \"pw: ''\" if removal without replacement desired. If 'Mask' is defined, this feature will be suppressed by it.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.CaptureGroupMask"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "condition": {
                    "type": "string"
                },
                "count_field_path": {
                    "type": "string"
                },
                "data_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "decision_interval": {
                    "description": "For tail sampling",
                    "type": "string"
                },
                "delete_empty_lists": {
                    "type": "boolean"
                },
                "delete_empty_maps": {
                    "type": "boolean"
                },
                "delete_empty_nulls": {
                    "type": "boolean"
                },
                "delete_empty_strings": {
                    "type": "boolean"
                },
                "delimiter": {
                    "description": "Following fields apply to split with delimiter filter type\nDelimiter is the specified delimiting character used to split a single log to multiple logs",
                    "type": "string"
                },
                "disable_clustering_by_severity_level": {
                    "type": "boolean"
                },
                "disabled": {
                    "type": "boolean"
                },
                "drain_tree_depth": {
                    "type": "integer"
                },
                "drain_tree_max_child": {
                    "type": "integer"
                },
                "excluded_field_paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "extract_metric_rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.ExtractMetricRule"
                    }
                },
                "fallback_value": {
                    "description": "Following fields apply to log level detector\nFallbackValue is the default value set if log level is not found in the log using given pattern",
                    "type": "string"
                },
                "field_mappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.FieldMappings"
                    }
                },
                "field_path": {
                    "description": "Following fields apply to extract-json-field filter type.\nFieldPath specifies the json path (dot separated) to the field whose value will be extracted and rest of the json content will be discarded.",
                    "type": "string"
                },
                "field_paths": {
                    "description": "For probabilistic sampling",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "filter_mode": {
                    "type": "string"
                },
                "final": {
                    "type": "boolean"
                },
                "group_by": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ignore_case": {
                    "type": "boolean"
                },
                "included_field_paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "interval": {
                    "description": "Other processors\nSelf-standing",
                    "type": "string"
                },
                "json_field_path": {
                    "description": "JSONFieldPath is the path within the JSON that holds the list that needs to be json unrolled",
                    "type": "string"
                },
                "keep_item": {
                    "type": "boolean"
                },
                "keep_log_if_failed": {
                    "description": "Following fields apply to log transformer JavaScript and enrichment using JavaScript\nStarting from agent v0.1.51, filters that were using \"required\" field will use \"keep_log_if_failed\" instead. Default value of this field is false\nReason for change is that script-based filters and alike should fail fast and discard log so the issue could be caught earlier",
                    "type": "boolean"
                },
                "key_field_paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "key_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.LookupField"
                    }
                },
                "links": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.Link"
                    }
                },
                "location_path": {
                    "type": "string"
                },
                "mask": {
                    "description": "Mask is the replacement string such as \"******\" or \"\" if removal without replacement desired.",
                    "type": "string"
                },
                "mask_captured": {
                    "description": "TODO: (VPB-440) Remove MaskCaptured field\n\n\t\tDeprecated @ 07-06-23 Use CaptureGroupMasks instead\n\n\t\tMaskCaptured is the mapping for capture groups such as \"pw: ******\" or \"pw: ''\" if removal without replacement desired. If 'Mask' is defined, this feature will be suppressed by it.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "match_mode": {
                    "type": "string"
                },
                "match_option": {
                    "type": "string"
                },
                "metadata": {
                    "type": "string"
                },
                "negate": {
                    "description": "Negate reverts the result of filter. Can be applied to regex, attribute and combination filter",
                    "type": "boolean"
                },
                "new_field_name": {
                    "description": "NewFieldName is currrently used for JSON unroll only. It is the name that the exploded array element will receive in each new event.\nLeave empty to expand the array element with its original name.",
                    "type": "string"
                },
                "node_reference": {
                    "type": "string"
                },
                "nodes": {
                    "description": "Compound node specific fields",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.Node"
                    }
                },
                "num_of_clusters": {
                    "type": "integer"
                },
                "number_to_allow": {
                    "type": "integer"
                },
                "out_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.LookupField"
                    }
                },
                "pass_through_on_failure": {
                    "type": "boolean"
                },
                "percentage": {
                    "type": "integer"
                },
                "predefined_pattern": {
                    "description": "Following fields apply to mask filter type\nPredefinedPattern names such as \"credit_card\"",
                    "type": "string"
                },
                "priority_field": {
                    "type": "string"
                },
                "processors": {
                    "description": "Subsequence node specific",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.SequenceProcessor"
                    }
                },
                "regex_option": {
                    "type": "string"
                },
                "reload_period": {
                    "type": "string"
                },
                "reporting_frequency": {
                    "type": "string"
                },
                "retire_period": {
                    "type": "string"
                },
                "samples_per_cluster": {
                    "type": "integer"
                },
                "sampling_policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/configv3.SamplingPolicy"
                    }
                },
                "similarity_threshold": {
                    "type": "number"
                },
                "statements": {
                    "type": "string"
                },
                "strings_to_delete": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "throttle_limit_per_sec": {
                    "type": "integer"
                },
                "timestamp_granularity": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/nodetype.NodeType"
                }
            }
        },
        "configv3.SourceFieldOverride": {
            "type": "object",
            "properties": {
                "expression": {
                    "type": "string"
                },
                "field": {
                    "type": "string"
                }
            }
        },
        "configv3.TLS": {
            "type": "object",
            "properties": {
                "ca_file": {
                    "description": "absolute path to CA certificate file",
                    "type": "string"
                },
                "ca_path": {
                    "description": "absolute path to scan CA certificate files",
                    "type": "string"
                },
                "client_auth_type": {
                    "description": "possible options: noclientcert, requestclientcert, requireanyclientcert, verifyclientcertifgiven, requireandverifyclientcert\ndefault is noclientcert",
                    "type": "string"
                },
                "crt_file": {
                    "description": "absolute path to Certificate file",
                    "type": "string"
                },
                "enabled": {
                    "description": "a flag for clients with TCP to enable TLS dialing",
                    "type": "boolean"
                },
                "ignore_certificate_check": {
                    "description": "optional flag to ignore certificate check",
                    "type": "boolean"
                },
                "key_file": {
                    "description": "absolute path to private Key file",
                    "type": "string"
                },
                "key_password": {
                    "description": "optional password for tls.key_file file",
                    "type": "string"
                },
                "max_version": {
                    "description": "optional max version for TLS",
                    "type": "string"
                },
                "min_version": {
                    "description": "optional min version for TLS",
                    "type": "string"
                }
            }
        },
        "configv3.TargetAllocation": {
            "type": "string",
            "enum": [
                "consistent",
                "round_robin"
            ],
            "x-enum-varnames": [
                "ConsistentTargetAllocation",
                "RoundRobinTargetAllocation"
            ]
        },
        "configv3.TransformField": {
            "type": "object",
            "properties": {
                "field_path": {
                    "type": "string"
                },
                "ignore_if_empty": {
                    "type": "boolean"
                },
                "operation": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "configv3.ValueAdjustmentRule": {
            "type": "object",
            "properties": {
                "expression": {
                    "type": "string"
                },
                "field_numeric_dimension": {
                    "type": "string"
                },
                "numeric_dimension": {
                    "type": "string"
                }
            }
        },
        "core.ArchiveRecordV1": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "body": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "resource": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "severity_text": {
                    "type": "string"
                },
                "span_id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "trace_id": {
                    "type": "string"
                }
            }
        },
        "core.ArchiveResponseV1": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.ArchiveRecordV1"
                    }
                },
                "next_cursor": {
                    "type": "string"
                },
                "query_id": {
                    "type": "string"
                }
            }
        },
        "core.BaseConfCreateRequest": {
            "type": "object",
            "required": [
                "environment",
                "tag"
            ],
            "properties": {
                "cluster_name": {
                    "description": "Pipelines with same cluster name will be grouped together",
                    "type": "string"
                },
                "description": {
                    "description": "Description of the pipeline",
                    "type": "string"
                },
                "environment": {
                    "description": "Environment where the pipeline will be deployed",
                    "enum": [
                        "Kubernetes",
                        "Windows",
                        "MacOS",
                        "Linux",
                        "Docker"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.EnvironmentType"
                        }
                    ]
                },
                "fleet_subtype": {
                    "description": "FleetSubtype is required when Environment is Kubernetes",
                    "enum": [
                        "Edge",
                        "Coordinator",
                        "Gateway"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.FleetSubtype"
                        }
                    ]
                },
                "tag": {
                    "description": "Tag is used to identify the pipeline",
                    "type": "string"
                }
            }
        },
        "core.ChunkMetrics": {
            "type": "object",
            "properties": {
                "batch_duration_samples_count": {
                    "type": "integer"
                },
                "batch_p50_ms": {
                    "type": "integer"
                },
                "batch_p90_ms": {
                    "type": "integer"
                },
                "bytes_streamed": {
                    "type": "integer"
                },
                "env_variables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "invalid_rows": {
                    "type": "integer"
                },
                "latency_p50_ms": {
                    "description": "Latencies",
                    "type": "integer"
                },
                "latency_p90_ms": {
                    "type": "integer"
                },
                "latency_samples_count": {
                    "description": "samples count",
                    "type": "integer"
                },
                "read_latency_p50_ms": {
                    "type": "integer"
                },
                "read_latency_p90_ms": {
                    "type": "integer"
                },
                "read_latency_samples_count": {
                    "type": "integer"
                },
                "rows_read": {
                    "type": "integer"
                },
                "rows_streamed": {
                    "type": "integer"
                },
                "uncompressed_bytes_read": {
                    "description": "Counters",
                    "type": "integer"
                },
                "write_latency_samples_count": {
                    "type": "integer"
                },
                "write_p50_ms": {
                    "type": "integer"
                },
                "write_p90_ms": {
                    "type": "integer"
                },
                "write_requests": {
                    "type": "integer"
                },
                "write_retries": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                }
            }
        },
        "core.ClusterStat": {
            "type": "object",
            "properties": {
                "anomaly": {
                    "description": "DEPRECATED\nAnomalyScore is the cluster's anomaly score",
                    "type": "number"
                },
                "count": {
                    "description": "Count of cluster in the window",
                    "type": "integer"
                },
                "delta": {
                    "description": "Delta is the percentage increase of this cluster's count compared to previous window.",
                    "type": "number"
                },
                "offset_counts": {
                    "description": "DEPRECATED\nOffsetCounts is counts of cluster in previous offset windows.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "offset_deltas": {
                    "description": "DEPRECATED\nOffsetDeltas is the percentage increase of this cluster's count compared to previous windows.",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "offset_proportions": {
                    "description": "DEPRECATED\nOffsetProportions is proportions of this cluster's count within all clusters counts in previous windows.",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "past_count": {
                    "description": "DEPRECATED\nPastCount is count of cluster in previous window.",
                    "type": "integer"
                },
                "past_proportion": {
                    "description": "DEPRECATED\nPastProportion is proportion of this cluster's count within all clusters counts in previous window.",
                    "type": "number"
                },
                "pattern": {
                    "description": "Pattern of the cluster",
                    "type": "string"
                },
                "proportion": {
                    "description": "Proportion of this cluster to rest of the cluster. Rest of the cluster can be scoped to tag or source.",
                    "type": "number"
                },
                "sentiment": {
                    "description": "Sentiment analysis results",
                    "type": "number"
                }
            }
        },
        "core.ClusterStatResponse": {
            "type": "object",
            "properties": {
                "stats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.ClusterStat"
                    }
                }
            }
        },
        "core.Conf": {
            "type": "object",
            "properties": {
                "cluster_name": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "environment": {
                    "$ref": "#/definitions/core.EnvironmentType"
                },
                "fleet_subtype": {
                    "$ref": "#/definitions/core.FleetSubtype"
                },
                "fleet_type": {
                    "$ref": "#/definitions/core.FleetType"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "description": "Stores status (updated/updates available/deleted) of compound nodes",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.ConfMetadata"
                        }
                    ]
                },
                "orgID": {
                    "type": "string"
                },
                "retrieved": {
                    "description": "Latest retrieval time for installation. Will move to a separate table once obscured hostID for install host is implemented",
                    "type": "string"
                },
                "rollout_task_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/core.FleetStatus"
                },
                "tag": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "updater": {
                    "type": "string"
                },
                "version": {
                    "$ref": "#/definitions/core.ConfigVersion"
                }
            }
        },
        "core.ConfCompoundNodesMetadata": {
            "type": "object",
            "properties": {
                "deleted": {
                    "description": "IDs of compound nodes that have been deleted",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated": {
                    "description": "IDs of compound nodes updated to latest version",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updates_available": {
                    "description": "IDs of compound nodes that have updates available",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "core.ConfCreateRequest": {
            "type": "object",
            "required": [
                "environment",
                "tag"
            ],
            "properties": {
                "cluster_name": {
                    "description": "Pipelines with same cluster name will be grouped together",
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "description": {
                    "description": "Description of the pipeline",
                    "type": "string"
                },
                "environment": {
                    "description": "Environment where the pipeline will be deployed",
                    "enum": [
                        "Kubernetes",
                        "Windows",
                        "MacOS",
                        "Linux",
                        "Docker"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.EnvironmentType"
                        }
                    ]
                },
                "fleet_subtype": {
                    "description": "FleetSubtype is required when Environment is Kubernetes",
                    "enum": [
                        "Edge",
                        "Coordinator",
                        "Gateway"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.FleetSubtype"
                        }
                    ]
                },
                "fleet_type": {
                    "$ref": "#/definitions/core.FleetType"
                },
                "tag": {
                    "description": "Tag is used to identify the pipeline",
                    "type": "string"
                }
            }
        },
        "core.ConfCreateResponse": {
            "type": "object",
            "properties": {
                "cluster_name": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "deploy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "environment": {
                    "$ref": "#/definitions/core.EnvironmentType"
                },
                "fleet_subtype": {
                    "$ref": "#/definitions/core.FleetSubtype"
                },
                "fleet_type": {
                    "$ref": "#/definitions/core.FleetType"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "description": "Stores status (updated/updates available/deleted) of compound nodes",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.ConfMetadata"
                        }
                    ]
                },
                "orgID": {
                    "type": "string"
                },
                "retrieved": {
                    "description": "Latest retrieval time for installation. Will move to a separate table once obscured hostID for install host is implemented",
                    "type": "string"
                },
                "rollout_task_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/core.FleetStatus"
                },
                "tag": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "updater": {
                    "type": "string"
                },
                "version": {
                    "$ref": "#/definitions/core.ConfigVersion"
                }
            }
        },
        "core.ConfMetadata": {
            "type": "object",
            "properties": {
                "compound_nodes": {
                    "$ref": "#/definitions/core.ConfCompoundNodesMetadata"
                },
                "node_references": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "telemetry_gen_templates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "core.ConfValidateRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "version": {
                    "$ref": "#/definitions/core.ConfigVersion"
                }
            }
        },
        "core.ConfigHistory": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "string"
                },
                "config_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "org_id": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/core.ConfigHistoryStatus"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "core.ConfigHistoryStatus": {
            "type": "string",
            "enum": [
                "Not Deployed",
                "Deployed"
            ],
            "x-enum-varnames": [
                "ConfigHistoryNotDeployed",
                "ConfigHistoryDeployed"
            ]
        },
        "core.ConfigValidationResult": {
            "type": "object",
            "properties": {
                "error": {},
                "reason": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "core.ConfigVersion": {
            "type": "string",
            "enum": [
                "v2",
                "v3"
            ],
            "x-enum-varnames": [
                "ConfigV2",
                "ConfigV3"
            ]
        },
        "core.DetectedSource": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "duration": {
                    "type": "integer"
                },
                "end": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "rate": {
                    "type": "number"
                },
                "resource": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "start": {
                    "type": "integer"
                },
                "volume": {
                    "type": "number"
                }
            }
        },
        "core.EnvironmentType": {
            "type": "string",
            "enum": [
                "Kubernetes",
                "Helm",
                "Docker",
                "MacOS",
                "Linux",
                "Windows"
            ],
            "x-enum-varnames": [
                "KubernetesEnvironmentType",
                "HelmEnvironmentType",
                "DockerEnvironmentType",
                "MacOSEnvironmentType",
                "LinuxEnvironmentType",
                "WindowsEnvironmentType"
            ]
        },
        "core.EventItem": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "body": {
                    "type": "string"
                },
                "event_domain": {
                    "type": "string"
                },
                "event_type": {
                    "type": "string"
                },
                "resource": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "severity_text": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "core.EventResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.EventItem"
                    }
                },
                "next_cursor": {
                    "type": "string"
                },
                "query_id": {
                    "type": "string"
                }
            }
        },
        "core.FleetStatus": {
            "type": "string",
            "enum": [
                "running",
                "suspended"
            ],
            "x-enum-varnames": [
                "FleetRunning",
                "FleetSuspended"
            ]
        },
        "core.FleetSubtype": {
            "type": "string",
            "enum": [
                "Edge",
                "Coordinator",
                "Gateway"
            ],
            "x-enum-varnames": [
                "EdgeFleetSubtype",
                "CoordinatorFleetSubtype",
                "GatewayFleetSubtype"
            ]
        },
        "core.FleetType": {
            "type": "string",
            "enum": [
                "Edge",
                "Cloud",
                "Gateway"
            ],
            "x-enum-varnames": [
                "EdgeFleetType",
                "CloudFleetType",
                "GatewayFleetType"
            ]
        },
        "core.IntegrationTestErrorDetails": {
            "type": "object",
            "properties": {
                "destination": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status_code": {
                    "type": "string"
                }
            }
        },
        "core.IntegrationTestResponse": {
            "type": "object",
            "properties": {
                "error_details": {
                    "$ref": "#/definitions/core.IntegrationTestErrorDetails"
                },
                "error_message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "core.ItemSchema": {
            "type": "string",
            "enum": [
                "otel"
            ],
            "x-enum-varnames": [
                "OTELItemSchema"
            ]
        },
        "core.LookupTable": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "created_on": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "pk": {
                    "description": "PK is org ID",
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "sk": {
                    "description": "SK is name of each lookup table",
                    "type": "string"
                },
                "tags": {
                    "type": "string"
                },
                "updated_on": {
                    "type": "string"
                }
            }
        },
        "core.LookupTableMetadata": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "created_on": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "tags": {
                    "type": "string"
                },
                "updated_on": {
                    "type": "string"
                }
            }
        },
        "core.LookupTableMetadataResponse": {
            "type": "object",
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/core.LookupTableMetadata"
                }
            }
        },
        "core.LookupTableResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "metadata": {
                    "$ref": "#/definitions/core.LookupTableMetadata"
                }
            }
        },
        "core.LookupTablesMetadataResponse": {
            "type": "object",
            "properties": {
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.LookupTableMetadata"
                    }
                }
            }
        },
        "core.OperationStatus": {
            "type": "string",
            "enum": [
                "created",
                "invoked",
                "in-progress",
                "completed",
                "failed",
                "cancelled",
                "marked-for-delete",
                "polled-for-execution",
                "skipped"
            ],
            "x-enum-comments": {
                "Skipped": "used for operations that are skipped due to already being claimed by other clusters"
            },
            "x-enum-varnames": [
                "Created",
                "Invoked",
                "InProgress",
                "Completed",
                "Failed",
                "Cancelled",
                "MarkedForDeletion",
                "PolledForExecution",
                "Skipped"
            ]
        },
        "core.Rehydration": {
            "type": "object",
            "properties": {
                "archive_flush_interval": {
                    "description": "Archive Flush Interval is the flush interval for the agent with this tag,\nthis helps us calculate which files overflowed into the next s3 bucket due to flush latency",
                    "type": "string"
                },
                "assigned_cluster": {
                    "description": "AssignedCluster is the cluster that this rehydration is assigned to\nThis is used to route the retries of the rehydration to the correct cluster\nand preventing multiple clusters from processing the same rehydration",
                    "type": "string"
                },
                "checkpoint": {
                    "description": "Checkpoint is the last object key the rehydration job processed. Shouldn't be shown to user",
                    "type": "string"
                },
                "checkpoint_v2": {
                    "description": "CheckpointV2 saves pending files instead of processed ones.\nIt also differs structurally so they are not compatible with Checkpoint field.\nUsed in the rehydration with queue and parallel workers.\nShouldn't be shown to user",
                    "type": "string"
                },
                "created": {
                    "description": "Created \u0026 Updated are timestamps in core.StorageTimeFormat",
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "dest_overwrites": {
                    "description": "DestOverwirtes contains possible overwrites to the dest integration\nThis is useful when customer wants to use an already existing integration\nbut with slightly different settings",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "destination": {
                    "type": "string"
                },
                "dynamic_url": {
                    "description": "Dynamic URL is user experience feature and will be generated for specific type of destinations",
                    "type": "string"
                },
                "error": {
                    "type": "string"
                },
                "exclude_metadata": {
                    "description": "Exclude Metadata excludes Edge Delta Specific metadata (such as metric type etc) whilst doing rehydrations",
                    "type": "boolean"
                },
                "exclude_overlap": {
                    "description": "ExcludeOverlap exclude logs rehydrated by existing rehydrations",
                    "type": "boolean"
                },
                "facets": {
                    "description": "Facets are used to filter rehydrations with facet_options api",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "file_count": {
                    "type": "integer"
                },
                "from": {
                    "description": "From \u0026 To are timestamps in core.URLTimeFormat",
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "keyword_filter": {
                    "type": "string"
                },
                "metrics": {
                    "description": "Metrics is the new metrics object that contains all the metrics\ncollected during the rehydration process\nSome of the information here is also persisted to ProcessStats to protect UI behaviour",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.RehydrationMetrics"
                        }
                    ]
                },
                "org_id": {
                    "type": "string"
                },
                "percentage": {
                    "description": "Percentage is duplicated here for org level rehydrations, omitted in individual rehydrations\nbecause RehydrationWithStatus is used instead",
                    "type": "number"
                },
                "process_stats": {
                    "description": "ProcessStats is the overall process stats of the rehydration process",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.RehydrationProcessStats"
                        }
                    ]
                },
                "provisioned_creds": {
                    "description": "UseProvisionedCredentials indicates the credentials on org's s3 resource should be used.\nBy default edgedelta provisioned AWS credentials only has PutObject permission (for agents to upload)\nIn the backend we have uber credentials which can read from any S3 bucket in edgedelta aws account.\nThis uber credentials are used by rehydration handlers by default.\nIf UseProvisionedCredentials=true then the custom credentials from the org resource will be used. This is to support onboarding customer S3 via our org-resource table.",
                    "type": "boolean"
                },
                "rehydration_id": {
                    "type": "string"
                },
                "source_filters": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "source_integration": {
                    "description": "SourceIntegration is the integration that will be used for streaming",
                    "type": "string"
                },
                "source_type": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/core.OperationStatus"
                },
                "tag": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "updater": {
                    "type": "string"
                },
                "use_ch_low_level": {
                    "type": "boolean"
                },
                "warehouse_name": {
                    "description": "These fields are used to set up clickhouse rehydrations",
                    "type": "string"
                },
                "warehouse_type": {
                    "type": "string"
                }
            }
        },
        "core.RehydrationMetrics": {
            "type": "object",
            "properties": {
                "average_chunk_size_bytes": {
                    "type": "integer"
                },
                "average_chunk_size_count": {
                    "type": "integer"
                },
                "batch_duration_samples_count": {
                    "type": "integer"
                },
                "batch_p50_ms": {
                    "type": "integer"
                },
                "batch_p90_ms": {
                    "type": "integer"
                },
                "chunk_metrics": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/core.ChunkMetrics"
                    }
                },
                "chunks_built": {
                    "type": "integer"
                },
                "env_variables": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "latency_p50_ms": {
                    "description": "Latencies",
                    "type": "integer"
                },
                "latency_p90_ms": {
                    "type": "integer"
                },
                "latency_samples_count": {
                    "description": "samples count",
                    "type": "integer"
                },
                "objects_count_after_filter": {
                    "type": "integer"
                },
                "objects_listed": {
                    "type": "integer"
                },
                "read_latency_p50_ms": {
                    "type": "integer"
                },
                "read_latency_p90_ms": {
                    "type": "integer"
                },
                "read_latency_samples_count": {
                    "type": "integer"
                },
                "tasks_failed": {
                    "type": "integer"
                },
                "tasks_processed": {
                    "type": "integer"
                },
                "tasks_published": {
                    "type": "integer"
                },
                "total_bytes_read": {
                    "type": "integer"
                },
                "total_bytes_streamed": {
                    "type": "integer"
                },
                "total_invalid_rows": {
                    "type": "integer"
                },
                "total_list_requests": {
                    "type": "integer"
                },
                "total_rows_read": {
                    "type": "integer"
                },
                "total_rows_streamed": {
                    "type": "integer"
                },
                "total_slice_count": {
                    "type": "integer"
                },
                "total_uncompressed_bytes_read": {
                    "type": "integer"
                },
                "write_latency_samples_count": {
                    "type": "integer"
                },
                "write_p50_ms": {
                    "type": "integer"
                },
                "write_p90_ms": {
                    "type": "integer"
                }
            }
        },
        "core.RehydrationProcessStats": {
            "type": "object",
            "properties": {
                "batch_push_latency": {
                    "type": "integer"
                },
                "bytes_count": {
                    "type": "integer"
                },
                "forwarding_batches_count": {
                    "type": "integer"
                },
                "forwarding_end_time": {
                    "type": "string"
                },
                "forwarding_start_time": {
                    "type": "string"
                },
                "invalid": {
                    "type": "integer"
                },
                "query_execution_time": {
                    "description": "milliseconds",
                    "type": "integer"
                },
                "query_results_parsing_time": {
                    "description": "milliseconds",
                    "type": "integer"
                },
                "results_forwarding_time": {
                    "description": "milliseconds",
                    "type": "integer"
                },
                "scanned": {
                    "type": "integer"
                },
                "streamed": {
                    "type": "integer"
                },
                "streamed_bytes_count": {
                    "type": "integer"
                },
                "successful_bytes_count": {
                    "type": "integer"
                }
            }
        },
        "core.RehydrationResponse": {
            "type": "object",
            "properties": {
                "next_cursor": {
                    "type": "string"
                },
                "rehydrations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.Rehydration"
                    }
                }
            }
        },
        "core.RehydrationWithStatus": {
            "type": "object",
            "properties": {
                "percentage": {
                    "type": "number"
                },
                "rehydration": {
                    "$ref": "#/definitions/core.Rehydration"
                }
            }
        },
        "core.SourceDetectionPayload": {
            "type": "object",
            "properties": {
                "config_id": {
                    "type": "string"
                },
                "org_id": {
                    "type": "string"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/core.DetectedSource"
                    }
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "core.Template": {
            "type": "object",
            "properties": {
                "configVersion": {
                    "description": "The version of the underlying config YAML",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.ConfigVersion"
                        }
                    ]
                },
                "deploy": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "labels": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "raw_value": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "type": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "core.TemplateType": {
            "type": "string",
            "enum": [
                "log",
                "metric",
                "trace"
            ],
            "x-enum-varnames": [
                "LogTemplateType",
                "MetricTemplateType",
                "TraceTemplateType"
            ]
        },
        "core.UpdateConfRequest": {
            "type": "object",
            "properties": {
                "cluster_name": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "content_changed": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                }
            }
        },
        "core.WizardTemplateResponse": {
            "type": "object",
            "properties": {
                "config_details": {
                    "$ref": "#/definitions/core.Conf"
                },
                "config_template": {
                    "$ref": "#/definitions/core.Template"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": true
                }
            }
        },
        "datasize.Size": {
            "type": "integer",
            "enum": [
                1,
                1000,
                1000000,
                1000000000,
                1000000000000,
                1000000000000000,
                1000000000000000000,
                1024,
                1048576,
                1073741824,
                1099511627776,
                1125899906842624,
                1152921504606846976
            ],
            "x-enum-varnames": [
                "Byte",
                "KiloByte",
                "MegaByte",
                "GigaByte",
                "TeraByte",
                "PetaByte",
                "ExaByte",
                "KibiByte",
                "MebiByte",
                "GigiByte",
                "TebiByte",
                "PebiByte",
                "ExbiByte"
            ]
        },
        "flog.Format": {
            "type": "string",
            "enum": [
                "apache_combined_simple",
                "apache_common",
                "apache_common_json",
                "apache_combined",
                "apache_combined_json",
                "apache_error",
                "api_log",
                "argocd_log",
                "cef_with_syslog",
                "cef_without_syslog",
                "cisco_asa",
                "clickhouse_log",
                "cloudtrail",
                "common_log",
                "core_dns_log",
                "fortigate_dns_log",
                "fortigate_traffic_log",
                "gigamon_amx",
                "infoblox_dns_event",
                "infoblox_dns_response",
                "istio_access_log",
                "json_log",
                "leef_with_syslog",
                "leef_without_syslog",
                "microsoft_dns",
                "mysql_error",
                "mysql_slow_query",
                "nginx_log",
                "palo_alto_threat",
                "palo_alto_traffic",
                "redis_log",
                "rfc3164",
                "rfc5424",
                "vpc_flow",
                "zscaler_zia_dns",
                "zscaler_zia_firewall",
                "zscaler_zia_tunnel",
                "zscaler_zia_web"
            ],
            "x-enum-varnames": [
                "ApacheCombinedSimpleFlogFormat",
                "ApacheCommonFlogFormat",
                "ApacheCommonJSONFlogFormat",
                "ApacheCombinedFlogFormat",
                "ApacheCombinedJSONFlogFormat",
                "ApacheErrorFlogFormat",
                "APILogFlogFormat",
                "ArgoCDLogFlogFormat",
                "CEFWithSyslogFlogFormat",
                "CEFWithoutSyslogFlogFormat",
                "CiscoASAFlogFormat",
                "ClickhouseLogFlogFormat",
                "CloudTrailFlogFormat",
                "CommonLogFlogFormat",
                "CoreDNSLogFlogFormat",
                "FortigateDNSLogFlogFormat",
                "FortigateTrafficLogFlogFormat",
                "GigamonAMXLogFlogFormat",
                "InfoBloxDNSEventFlogFormat",
                "InfoBloxDNSResponseFlogFormat",
                "IstioAccessLogFlogFormat",
                "JSONLogFlogFormat",
                "LEEFWithSyslogFlogFormat",
                "LEEFWithoutSyslogFlogFormat",
                "MicrosoftDNSFlogFormat",
                "MYSQLErrorFlogFormat",
                "MYSQLSlowQueryFlogFormat",
                "NginxLogFlogFormat",
                "PaloAltoThreatFlogFormat",
                "PaloAltoTrafficFlogFormat",
                "RedisLogFlogFormat",
                "RFC3164FlogFormat",
                "RFC5424FlogFormat",
                "VPCFlowFlogFormat",
                "ZScalerZIADNSFlogFormat",
                "ZScalerZIAFirewallFlogFormat",
                "ZScalerZIATunnelFlogFormat",
                "ZScalerZIAWebFlogFormat"
            ]
        },
        "nodetype.NodeCategory": {
            "type": "string",
            "enum": [
                "input",
                "output",
                "processor",
                "*",
                "invalid"
            ],
            "x-enum-varnames": [
                "InputNodeCategory",
                "OutputNodeCategory",
                "ProcessorNodeCategory",
                "AnyNodeCategory",
                "InvalidNodeCategory"
            ]
        },
        "nodetype.NodeSubcategory": {
            "type": "string",
            "enum": [
                "standard",
                "push",
                "pull",
                "collect",
                "filters",
                "transformations",
                "mappers",
                "enrichments",
                "parsers",
                "analytics",
                "archive",
                "streaming",
                "trigger",
                "integration",
                "edge delta",
                "diagnostics",
                "compound nodes",
                "sequence nodes",
                ""
            ],
            "x-enum-varnames": [
                "StandardNodeSubcategory",
                "PushNodeSubcategory",
                "PullNodeSubcategory",
                "CollectNodeSubcategory",
                "FiltersNodeSubcategory",
                "TransformationsNodeSubcategory",
                "MapperNodeSubcategory",
                "EnrichmentsNodeSubcategory",
                "ParsersNodeSubcategory",
                "AnalyticsNodeSubcategory",
                "ArchiveNodeSubcategory",
                "StreamingNodeSubcategory",
                "TriggerNodeSubcategory",
                "IntegrationNodeSubcategory",
                "EdgeDeltaNodeSubcategory",
                "DiagnosticsNodeSubcategory",
                "CompoundNodesSubcategory",
                "SequenceNodesSubcategory",
                "NoneNodeSubcategory"
            ]
        },
        "nodetype.NodeType": {
            "type": "string",
            "enum": [
                "crowdstrike_fdr_input",
                "datadog_agent_input",
                "demo_input",
                "demo_template_input",
                "telemetrygen_input",
                "docker_input",
                "ed_agent_stats_input",
                "ed_component_health_input",
                "ed_container_stats_input",
                "ed_gateway_input",
                "ed_k8s_metrics_input",
                "ed_node_health_input",
                "ed_pipeline_io_stats_input",
                "ed_source_detection_input",
                "ed_source_samples_input",
                "ed_system_stats_input",
                "ed_self_telemetry_input",
                "eventhub_input",
                "exec_input",
                "file_input",
                "fluentd_input",
                "http_input",
                "journald_input",
                "k8s_event_input",
                "k8s_traffic_input",
                "k8s_trace_input",
                "kafka_input",
                "kubernetes_input",
                "prometheus_input",
                "memory_input",
                "otlp_input",
                "pubsub_input",
                "http_pull_input",
                "s3_input",
                "splunk_hec_input",
                "tcp_input",
                "udp_input",
                "winevent_input",
                "aws_cloudwatch_output",
                "azure_log_analytics_output",
                "azure_sentinel_output",
                "blob_output",
                "crowdstrike_falcon_logscale_output",
                "datadog_output",
                "digitalocean_spaces_output",
                "dynatrace_output",
                "elastic_output",
                "exabeam_output",
                "fluentd_output",
                "gcs_output",
                "google_cloud_logging_output",
                "google_cloud_logging_with_ottl_output",
                "http_output",
                "ibm_object_storage_output",
                "ibm_qradar_output",
                "kafka_output",
                "localstorage_output",
                "loki_output",
                "minio_output",
                "newrelic_output",
                "openmetrics_output",
                "otlp_output",
                "prometheus_exporter_output",
                "prometheus_remote_write_output",
                "s3_output",
                "securonix_output",
                "slack_output",
                "splunk_output",
                "sumologic_output",
                "tcp_output",
                "teams_output",
                "void_output",
                "webhook_output",
                "zenko_output",
                "ed_archive_output",
                "ed_logs_output",
                "ed_debug_output",
                "ed_health_output",
                "ed_metrics_output",
                "ed_patterns_output",
                "ed_sources_output",
                "ed_traces_output",
                "ed_output",
                "ed_gateway_output",
                "aggregate_metric",
                "base64_decode",
                "compound_input",
                "compound",
                "compound_output",
                "cumulative_to_delta",
                "datadog_mapper",
                "dedup",
                "enrich",
                "extract_json_field",
                "extract_metric",
                "generic_transform",
                "grok",
                "gzip_decompress",
                "json_unroll",
                "log_level_detector",
                "log_to_metric",
                "log_to_pattern",
                "log_transform",
                "lookup",
                "mask",
                "opentsdb_parse",
                "ottl_transform",
                "ottl_filter",
                "output_transform",
                "parse_json_attributes",
                "ratio",
                "regex_filter",
                "resource_transform",
                "sample",
                "route",
                "route_ottl",
                "sequence_input",
                "sequence",
                "sequence_output",
                "split_with_delimiter",
                "splunk_mapper",
                "suppress",
                "tail_sample",
                "threshold",
                "top_k",
                "unescape_json",
                "delete_empty_values",
                "generic_mask",
                "log_to_pattern_metric",
                "comment",
                "archive_buffered",
                "edge_rollup_service",
                "incoming_stats_processor",
                "item_buffered",
                "log_threshold_monitor",
                "observer"
            ],
            "x-enum-comments": {
                "OutputEDLogType": "ed_logs_output is renamed from ed_archive_output. ed_archive_output is kept for backward compatibility."
            },
            "x-enum-varnames": [
                "InputCrowdStrikeFDRNodeType",
                "InputDatadogAgentNodeType",
                "InputDemoNodeType",
                "InputDemoTemplateNodeType",
                "InputTelemetryGenNodeType",
                "InputDockerNodeType",
                "InputEDAgentStatsNodeType",
                "InputEDComponentHealthNodeType",
                "InputEDContainerStatsNodeType",
                "InputEDGatewayNodeType",
                "InputEDK8sMetricsNodeType",
                "InputEDNodeHealthNodeType",
                "InputEDPipelineIOStatsNodeType",
                "InputEDSourceDetectionNodeType",
                "InputEDSourceSamplesNodeType",
                "InputEDSystemStatsNodeType",
                "InputEDSelfTelemetryNodeType",
                "InputEventHubNodeType",
                "InputExecNodeType",
                "InputFileNodeType",
                "InputFluentdNodeType",
                "InputHTTPNodeType",
                "InputJournaldNodeType",
                "InputK8sEventNodeType",
                "InputK8sTrafficNodeType",
                "InputK8sTraceNodeType",
                "InputKafkaNodeType",
                "InputKubernetesNodeType",
                "InputPrometheusNodeType",
                "InputMemoryNodeType",
                "InputOTLPNodeType",
                "InputPubSubNodeType",
                "InputHTTPPullNodeType",
                "InputS3NodeType",
                "InputSplunkHECNodeType",
                "InputTCPNodeType",
                "InputUDPNodeType",
                "InputWinEventNodeType",
                "OutputAWSCloudwatchNodeType",
                "OutputAzureLogAnalyticsNodeType",
                "OutputAzureSentinelNodeType",
                "OutputBlobNodeType",
                "OutputCrowdStrikeFalconLogScaleNodeType",
                "OutputDatadogNodeType",
                "OutputDigitalOceanSpacesNodeType",
                "OutputDynatraceNodeType",
                "OutputElasticNodeType",
                "OutputExabeamNodeType",
                "OutputFluentDNodeType",
                "OutputGCSNodeType",
                "OutputGCLNodeType",
                "OutputGCLWithOTTLNodeType",
                "OutputHTTPNodeType",
                "OutputIBMObjectStorageNodeType",
                "OutputIBMQRadarNodeType",
                "OutputKafkaNodeType",
                "OutputLocalStorageNodeType",
                "OutputLokiNodeType",
                "OutputMinioNodeType",
                "OutputNewRelicNodeType",
                "OutputOpenMetricsNodeType",
                "OutputOTLPNodeType",
                "OutputPrometheusExporterNodeType",
                "OutputPrometheusRemoteWriteNodeType",
                "OutputS3NodeType",
                "OutputSecuronixNodeType",
                "OutputSlackNodeType",
                "OutputSplunkNodeType",
                "OutputSumoLogicNodeType",
                "OutputTCPNodeType",
                "OutputTeamsNodeType",
                "OutputVoidNodeType",
                "OutputWebhookNodeType",
                "OutputZenkoNodeType",
                "OutputEDArchiveType",
                "OutputEDLogType",
                "OutputEDDebugType",
                "OutputEDHealthType",
                "OutputEDMetricType",
                "OutputEDPatternType",
                "OutputEDSourceType",
                "OutputEDTraceType",
                "OutputEDType",
                "OutputEDGatewayNodeType",
                "AggregateMetricProcessorNodeType",
                "Base64DecodeProcessorNodeType",
                "CompoundInputNodeType",
                "CompoundNodeType",
                "CompoundOutputNodeType",
                "CumulativeToDeltaProcessorNodeType",
                "DatadogMapperNodeType",
                "DedupProcessorNodeType",
                "EnrichmentProcessorNodeType",
                "ExtractJSONFieldProcessorNodeType",
                "ExtractMetricProcessorNodeType",
                "GenericTransformProcessorNodeType",
                "GrokProcessorNodeType",
                "GzipDecompressProcessorNodeType",
                "JSONUnrollProcessorNodeType",
                "LogLevelDetectorNodeType",
                "LogToMetricProcessorNodeType",
                "LogToPatternProcessorNodeType",
                "LogTransformProcessorNodeType",
                "LookupProcessorNodeType",
                "MaskProcessorNodeType",
                "OpenTSDBProcessorNodeType",
                "OTTLTransformProcessorNodeType",
                "OTTLFilterProcessorNodeType",
                "OutputTransformProcessorNodeType",
                "ParseJSONAttributesNodeType",
                "RatioProcessorNodeType",
                "RegexFilterProcessorNodeType",
                "ResourceTransformProcessorNodeType",
                "SampleProcessorNodeType",
                "RouteNodeType",
                "RouteOTTLNodeType",
                "SequenceInputNodeType",
                "SequenceNodeType",
                "SequenceOutputNodeType",
                "SplitWithDelimiterProcessorNodeType",
                "SplunkMapperNodeType",
                "SuppressNodeType",
                "TailSampleProcessorNodeType",
                "ThresholdProcessorNodeType",
                "TopKProcessorNodeType",
                "UnescapeJSONProcessorNodeType",
                "DeleteEmptyValuesProcessorNodeType",
                "GenericMaskProcessorNodeType",
                "LogToPatternMetricProcessorNodeType",
                "CommentNodeType",
                "ArchiveBufferedProcessorNodeType",
                "EdgeRollUpServiceProcessorType",
                "IncomingStatsProcessorNodeType",
                "ItemBufferedProcessorNodeType",
                "LogThresholdMonitorProcessorType",
                "ObserverProcessorNodeType"
            ]
        },
        "nodetype.NodeVisibility": {
            "type": "string",
            "enum": [
                "basic",
                "advanced",
                "hidden"
            ],
            "x-enum-varnames": [
                "BasicNodeVisibility",
                "AdvancedNodeVisibility",
                "HiddenNodeVisibility"
            ]
        },
        "pipeline.ConvertYamlRequest": {
            "type": "object",
            "properties": {
                "pipeline": {
                    "$ref": "#/definitions/pipeline.Pipeline"
                }
            }
        },
        "pipeline.ConvertYamlResponse": {
            "type": "object",
            "properties": {
                "configurationYAML": {
                    "type": "string"
                }
            }
        },
        "pipeline.ExtendPipelineWithSourcesRequest": {
            "type": "object",
            "properties": {
                "allSourcesSelected": {
                    "type": "boolean"
                },
                "createSourcePerServiceName": {
                    "type": "boolean"
                },
                "environment": {
                    "$ref": "#/definitions/core.EnvironmentType"
                },
                "outputs": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "integrationName": {
                                "type": "string"
                            }
                        }
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "useEdOutputsOnly": {
                    "type": "boolean"
                }
            }
        },
        "pipeline.GetVisualPipelineResponse": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "environment": {
                    "$ref": "#/definitions/core.EnvironmentType"
                },
                "fleetSubtype": {
                    "$ref": "#/definitions/core.FleetSubtype"
                },
                "fleetType": {
                    "$ref": "#/definitions/core.FleetType"
                },
                "id": {
                    "type": "string"
                },
                "lastUpdated": {
                    "type": "string"
                },
                "orgID": {
                    "type": "string"
                },
                "pipeline": {
                    "$ref": "#/definitions/pipeline.Pipeline"
                },
                "pipelineNodes": {
                    "description": "Deprecated: 6-2-23 This field will be removed in a future release.  Please use Pipeline.Nodes instead",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pipeline.VisualizerNode"
                    }
                }
            }
        },
        "pipeline.NodeDataType": {
            "type": "string",
            "enum": [
                "log",
                "metric",
                "heartbeat",
                "health",
                "cluster_pattern_and_sample",
                "cluster_pattern",
                "cluster_sample",
                "archive",
                "signal",
                "custom",
                "diagnostic",
                "otlp_log",
                "otlp_trace",
                "otlp_metric",
                "k8s_event",
                "k8s_traffic",
                "datadog_payload",
                "splunk_payload",
                "unknown"
            ],
            "x-enum-varnames": [
                "LogNodeDataType",
                "MetricNodeDataType",
                "HeartbeatNodeDataType",
                "HealthNodeDataType",
                "ClusterPatternSampleNodeDataType",
                "ClusterPatternLogType",
                "ClusterSampleLogType",
                "ArchiveNodeDataType",
                "SignalNodeDataType",
                "CustomNodeDataType",
                "DiagnosticNodeDataType",
                "OTLPLogNodeDataType",
                "OTLPTraceNodeDataType",
                "OTLPMetricNodeDataType",
                "K8sEventNodeDataType",
                "K8sTrafficNodeDataType",
                "DatadogPayloadNodeDataType",
                "SplunkPayloadNodeDataType",
                "UnknownNodeDataType"
            ]
        },
        "pipeline.NodeTemplatesStatus": {
            "type": "object",
            "properties": {
                "deleted": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "inSync": {
                    "description": "deprecated, use Updated instead",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatesAvailable": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "pipeline.PathOutput": {
            "type": "object",
            "properties": {
                "nodes": {
                    "description": "The name of the nodes to which the path outputs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "outputDisplayString": {
                    "description": "A user-readable display string characterizing the `OutputTypes` property",
                    "type": "string"
                },
                "outputTypes": {
                    "description": "The types of Outputs allowed (e.g. string, log, metric) for this path\nFor non-compound nodes, these would be the same as the OutputTypes of the node\nFor compound nodes, these would depend on the processor nodes connected to compound output node",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pipeline.NodeDataType"
                    }
                },
                "path": {
                    "description": "The name of the path. Default paths use an empty string.",
                    "type": "string"
                }
            }
        },
        "pipeline.Pipeline": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The globally unique id of the pipeline",
                    "type": "string"
                },
                "nodeTemplatesStatus": {
                    "description": "Status of node templates used in the pipeline",
                    "allOf": [
                        {
                            "$ref": "#/definitions/pipeline.NodeTemplatesStatus"
                        }
                    ]
                },
                "nodes": {
                    "description": "The configuration graph of the pipeline",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pipeline.VisualizerNode"
                    }
                },
                "settings": {
                    "$ref": "#/definitions/configv3.EDSetting"
                },
                "tag": {
                    "description": "The human-readable identifier of the pipeline (unique within an Org)",
                    "type": "string"
                },
                "version": {
                    "description": "The version of the pipeline configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.ConfigVersion"
                        }
                    ]
                }
            }
        },
        "pipeline.VisualizerNode": {
            "type": "object",
            "properties": {
                "atLeastOnce": {
                    "description": "AtLeastOnce is for some nodes that needs to be present always",
                    "type": "boolean"
                },
                "category": {
                    "description": "The Category of the PipelineNode (e.g. Input, Processor, Output)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/nodetype.NodeCategory"
                        }
                    ]
                },
                "childNodes": {
                    "description": "Nested child nodes if this node is a compound node",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pipeline.VisualizerNode"
                    }
                },
                "configuration": {
                    "description": "Same as raw configuration but in json",
                    "allOf": [
                        {
                            "$ref": "#/definitions/configv3.Node"
                        }
                    ]
                },
                "configurationYAML": {
                    "description": "Raw configuration YAML for the node",
                    "type": "string"
                },
                "deprecatedNodeType": {
                    "description": "Deprecated node type to support backward compatibility",
                    "type": "string"
                },
                "extent": {
                    "description": "Required for positioning relative to parent node (extent: \"parent\")",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier for this PipelineNode instance",
                    "type": "string"
                },
                "inputDisplayString": {
                    "description": "A user-readable display string characterizing the `InputTypes` property",
                    "type": "string"
                },
                "inputTypes": {
                    "description": "The types of Inputs allowed (e.g. string, log, metric)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pipeline.NodeDataType"
                    }
                },
                "outputDisplayString": {
                    "description": "A user-readable display string characterizing the `OutputTypes` property",
                    "type": "string"
                },
                "outputTypes": {
                    "description": "The types of Outputs allowed (e.g. string, log, metric)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pipeline.NodeDataType"
                    }
                },
                "outputs": {
                    "description": "A list of IDs of Nodes which this Node outputs to",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "parentNode": {
                    "description": "Parent node if this node is a child of a compound node",
                    "type": "string"
                },
                "pathOutputs": {
                    "description": "A list of outputs, broken down by path when multiple paths are defined",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pipeline.PathOutput"
                    }
                },
                "releaseStatus": {
                    "description": "The release status of the node (e.g. released or beta)",
                    "type": "string"
                },
                "subcategories": {
                    "description": "The Subcategories of the PipelineNode (e.g. Filters, Transformations, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/nodetype.NodeSubcategory"
                    }
                },
                "type": {
                    "description": "An identifier for this Node's NodeSpec (e.g. regex-processor)",
                    "type": "string"
                },
                "visibility": {
                    "description": "The Visibility setting for the catalog item (e.g. basic, advanced, or hidden).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/nodetype.NodeVisibility"
                        }
                    ]
                }
            }
        },
        "types.DataFormat": {
            "type": "string",
            "enum": [
                "json",
                "msgpack",
                "raw"
            ],
            "x-enum-varnames": [
                "JSON",
                "MsgPack",
                "Raw"
            ]
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-ED-API-Token",
            "in": "header"
        }
    }
}